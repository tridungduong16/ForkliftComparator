// Bobcat AI Intelligence Platform - MVP Frontend (React + Tailwind)
// Repaired version with drag-and-drop, new brand support, and brochure upload improvements

import React, { useState, useEffect } from 'react';
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Upload } from "lucide-react";
import { DndContext, closestCenter } from '@dnd-kit/core';
import { arrayMove, SortableContext, useSortable, verticalListSortingStrategy } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';

function SortableItem({ id, model, selected, handleSelect }) {
  const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id });
  const style = {
    transform: CSS.Transform.toString(transform),
    transition
  };
  return (
    <Card
      ref={setNodeRef}
      style={style}
      {...attributes}
      {...listeners}
      key={id}
      className={`cursor-pointer transition border-2 ${selected.includes(model) ? "border-blue-600" : "border-gray-200"}`}
      onClick={() => handleSelect(model)}>
      <CardContent className="p-4">
        <h2 className="text-lg font-semibold">{model.brand} ‚Äì {model.model}</h2>
        <p className="text-sm text-gray-500">{model.tier} Tier ¬∑ {model.powerType}</p>
        <p className="text-xs mt-1">Origin: {model.origin} | Warranty: {model.warranty}m</p>
      </CardContent>
    </Card>
  );
}

export default function ForkliftComparison() {
  const [models, setModels] = useState([]);
  const [selected, setSelected] = useState([]);
  const [insights, setInsights] = useState([]);

  useEffect(() => {
    fetch("/api/models")
      .then(res => res.json())
      .then(setModels);
  }, []);

  const handleSelect = (model) => {
    if (selected.includes(model)) {
      setSelected(selected.filter(m => m !== model));
    } else {
      setSelected([...selected, model]);
    }
  };

  const handleDragEnd = (event) => {
    const { active, over } = event;
    if (active.id !== over.id) {
      const oldIndex = selected.findIndex(m => m.id === active.id);
      const newIndex = selected.findIndex(m => m.id === over.id);
      setSelected((items) => arrayMove(items, oldIndex, newIndex));
    }
  };

  const generateInsights = async () => {
    const res = await fetch("/api/insights", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ models: selected })
    });
    const data = await res.json();
    setInsights(data);
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-4">BOBCAT INTELLIGENCE PORTAL üß†</h1>
      <p className="mb-4 text-sm text-gray-600">Select competitor models below to compare. Upload brochures to generate insights.</p>

      <DndContext collisionDetection={closestCenter} onDragEnd={handleDragEnd}>
        <SortableContext items={models.map(m => m.id)} strategy={verticalListSortingStrategy}>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {models.map(model => (
              <SortableItem
                key={model.id}
                id={model.id}
                model={model}
                selected={selected}
                handleSelect={handleSelect}
              />
            ))}
          </div>
        </SortableContext>
      </DndContext>

      <div className="mt-6 flex gap-4">
        <Button onClick={generateInsights}>Generate Insights</Button>
        <label className="flex items-center gap-2 cursor-pointer">
          <Upload size={20} /> Upload Brochure
          <Input type="file" className="hidden" onChange={e => console.log("Upload", e.target.files[0])} />
        </label>
      </div>

      {insights.length > 0 && (
        <div className="mt-8">
          <h3 className="text-xl font-bold mb-2">AI-Generated Comparison Insights</h3>
          {insights.map((insight, index) => (
            <Card key={index} className="mb-4">
              <CardContent className="p-4">
                <h4 className="font-semibold">{insight.model}</h4>
                <p className="text-sm text-green-700">‚úÖ Strengths: {insight.strengths}</p>
                <p className="text-sm text-red-700">‚ùå Weaknesses: {insight.weaknesses}</p>
                <p className="text-sm mt-2 italic">üéØ Talk Track: {insight.talkTrack}</p>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}
